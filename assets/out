#!/bin/sh
# vim: set ft=sh

set -e
test -z $DEBUG || set -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

payload=$(mktemp /tmp/resource-out.XXXXXX)

cat > $payload <&0
test -z $DEBUG || cat $payload

cd $source

export AWS_DEFAULT_REGION=$(cat $payload|jq -r '.params.region // .source.region')

instance_id_file="$(cat $payload|jq -r '.params.instance_id_file // .source.instance_id_file // "ami-id/id" ')"
name="$(cat $payload|jq -r '.params.name // .source.name')"
description="$(cat $payload|jq -r '.params.name // .source.name // "Created by concourse-aws-ami-resource"')"
terminate="$(cat $payload|jq -r '.params.terminate == true')"

if [ -z "$name" ]; then
  echo "no name specified" >&2
  exit 1
fi

if ! test -f "$instance_id_file"; then
  echo "instance id file ${instance_id_file} not found in $(pwd)" >&2
  exit 1
fi

instance_id=$(cat $instance_id_file)

if [ -z "$instance_id" ]; then
  echo "instance_id_file ${instance_id_file} empty" >&2
  exit 1
fi

# if instance is just shutting down wait to complete otherwise create image fails
stopping=$(aws ec2 describe-instance-status --instance-ids "$instance_id" | \
    jq -e '.InstanceStatuses[0]|.InstanceState|.Name == "stopping"')

if [ "$state" == "true" ];then
    aws ec2 wait instance-stopped --instance-ids "$instance_id"
fi

# give command to create image
response=$(aws ec2 create-image --instance-id "$instance_id" --name "$name" --description "$description")

# get the ID
ami_id=$(echo $response|jq -r '.ImageId')

# wait for image to be available
aws ec2 wait image-available --image-ids "$ami_id"

# get some metadata
metadata=$(aws ec2 describe-images --image-ids "$ami_id" | \
    jq -r '.Images[0]|{Name,CreationDate,OwnerId}|to_entries|map({"name":.key, "value":.value})')

# terminate instance if requested
if $terminate;then
    aws ec2 terminate-instances --instance-ids "$instance_id"
fi

jq -n "{
  version: ${response},
  metadata: ${metadata}
}" >&3
