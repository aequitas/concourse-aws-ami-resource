#!/usr/bin/env python3

import logging as log
import re
import subprocess
import sys
from resource import Resource


class PackerResource(Resource):
    """Resource implementation for packer."""

    def out_cmd(self, workdir, source, params):
        """Packer build."""

        template_path = params['template_path']

        cmd = ['packer', 'build', '-machine-readable', template_path]

        try:
            output = subprocess.check_output(cmd, stderr=subprocess.STDOUT).decode('utf8')
        finally:
            print(output, file=sys.stderr)

        AMI_MATCH = 'artifact,0,id,(?P<region>[\w-]+):(?P<ami_id>[\w-]+)'
        version_match = re.search(AMI_MATCH, output, re.DOTALL)
        if not version_match:
            raise Exception('no AMI id in output')
        region, ami_id = version_match.groups()

        metadata = []

        TAG_MATCH = 'Adding tag: "(?P<name>[^"]+)": "(?P<value>[^"]*)"'
        for tag in re.finditer(TAG_MATCH, output, re.DOTALL):
            meta_tag = tag.groupdict()
            meta_tag['name'] = 'tag_' + meta_tag['name']
            metadata.append(meta_tag)

        return {
            'version': {
                'ImageId': ami_id,
                'Region': region,
            },
            'metadata': metadata,
        }

if __name__ == '__main__':
    print(PackerResource().run('out'))
